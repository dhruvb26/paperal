###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    mutliplier 1.5\n    max_delay_ms 10000\n  }\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.70.1\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "paper.baml": "class CitationObject {\n    in_text string\n    complete_reference string\n}\n\nclass Section {\n    title string\n    content string\n    references CitationObject[]\n}\n\nclass Page {\n    sections Section[]  \n}\n\n\nfunction ExtractPaper(references: string, page_content: string[]) -> Page {\n\n    client \"openai/gpt-4o\"  \n    prompt #\"\n        Extract the sections and unique in-text references from the paper. Make sure to only include the unique references. Also, map the references to the full-citation index from the list below:\n\n        If a section has no title, understand the section and give it a title accordingly.\n\n        {{ references }}\n  \n        Make sure to include the full content of the section in the output. \n\n        {{ page_content }}\n\n        {{ ctx.output_format }}\n    \"#\n}\n\ntest paper_test {\n    functions [ExtractPaper]\n    args {\n        references #\"\n        \"#\n     \n        page_content #\"\n\n        \"#\n    }\n}",
    "references.baml": "class ReferenceObject {\n    text string\n    url string\n}\n\nclass References {\n    references ReferenceObject[]\n}\n\nfunction ExtractReferences(paper: string[]) -> References {\n    client \"openai/gpt-4o\"\n    prompt #\"\n        Extract the references from the references section of the paper. Also, extract the url if any for each reference.\n\n        {{ paper }}\n\n        {{ ctx.output_format }}\n    \"#\n}\n\ntest reference_map_test {\n    functions [ExtractReferences]\n    args {\n        paper #\"\n        \"#\n    }\n}",
}

def get_baml_files():
    return file_map