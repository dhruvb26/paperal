["Preprint\nFigure 11: The system interface design for \u201crecommendation engine development\u201d is generated by\nthe architect agent (zoom in for a better view).\nE\nMORE DISCUSSIONS\nE.1\nDEEP-SEATED CHALLENGES\nMetaGPT also alleviates or solves these challenges with its unique designs:\nUse Context Efficiently\nTwo sub-challenges are present. First, unfolding short natural language\ndescriptions accurately to eliminate ambiguity. Second, maintaining information validity in lengthy\ncontexts, enables LLMs to concentrate on relevant data without distraction.\nReduce Hallucinations\nUsing LLMs to generate entire software programs faces code halluci-\nnation problems\u2014-including incomplete implementation of functions, missing dependencies, and\npotential undiscovered bugs, which may be more serious. LLMs often struggle with software gen-\neration due to vague task definitions. Focusing on granular tasks like requirement analysis and\npackage selection offers guided thinking, which LLMs lack in broad task solving.\nE.2\nINFORMATION OVERLOAD\nIn MetaGPT, we use a global message pool and a subscription mechanism to address \u201cinformation\noverload,\u201d which refers to the problem of receiving excessive or irrelevant information. This issue\nis dependent on specific applications. MetaGPT employs a message pool to streamline communi-\ncation, ensuring efficiency. Additionally, a subscription mechanism filters out irrelevant contexts,\nenhancing the relevance and utility of the information. This design is particularly crucial in soft-\n26\n"]